// Generated by CoffeeScript 1.4.0
var diffy;

if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function(elt) {
    var from, len;
    len = this.length >>> 0;
    from = Number(arguments_[1]) || 0;
    from = (from < 0 ? Math.ceil(from) : Math.floor(from));
    if (from < 0) {
      from += len;
    }
    while (from < len) {
      if (from in this && this[from] === elt) {
        return from;
      }
      from++;
    }
    return -1;
  };
}

if (!Array.prototype.remove) {
  Array.prototype.remove = function(from, to) {
    var rest;
    rest = this.slice((to || from) + 1 || this.length);
    this.length = (from < 0 ? this.length + from : from);
    return this.push.apply(this, rest);
  };
}

diffy = function(_old, _new) {
  var key, new_keys, result, _i, _len;
  result = {};
  result.changes = {};
  result.additions = {};
  result.deletions = {};
  new_keys = [];
  for (key in _new) {
    new_keys.push(key);
  }
  for (key in _old) {
    if (_new[key] != null) {
      if (_old[key] !== _new[key]) {
        result.changes[key] = {
          from: _old[key],
          to: _new[key]
        };
      }
      new_keys.remove(new_keys.indexOf(key));
    } else {
      result.deletions[key] = {
        from: _old[key],
        to: null
      };
    }
  }
  for (_i = 0, _len = new_keys.length; _i < _len; _i++) {
    key = new_keys[_i];
    result.additions[key] = {
      from: null,
      to: _new[key]
    };
  }
  return result;
};

if (typeof module !== "undefined" && module !== null) {
  module.exports = diffy;
}
